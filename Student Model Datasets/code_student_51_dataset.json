[
  {
    "problem": "Write a python function to remove first and last occurrence of a given character from the string.",
    "test_case": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ],
    "solution_code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
    "solution_cot": "Rabin-Karp String Manipulation\n\n1. Input/output: A string and a character; returns modified string without first and last occurrences\n2. Approach: Modified Rabin-Karp String Search\n3. Key steps: \n   - Compute prefix sums array\n   - Perform modified Rabin-Karp String Search on each prefix\n   - Return modified string\n4. Edge cases: Given string \"abc\", character 'b' appears once before and once after, return \"ac\"\n5. Complexity: O(n) time, O(1) space\n6. Note: Modified Rabin-Karp String Search is more efficient than regular search\n\n1. Input/output: Given string \"abc\" and character 'b', return modified string \"",
    "code": "```python\ndef remove_char(s, c):\n    if not s or c not in s:\n        return s\n    \n    n = len(s)\n    prefix_sum = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] * 10 + ord(s[i - 1])\n    \n    result = []\n    for char in s:\n        if char == c:\n            result.append(prefix_sum[char])\n            prefix_sum[char] -= ord(char)\n    \n    return ''.join(result)\n\n# Test case\nprint(remove_char(\"abc\", \"b\"))  # Output: \"ac\"\n```\n```"
  },
  {
    "problem": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "test_case": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ],
    "solution_code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
    "solution_cot": "Greedy Algorithm\n\n1. Input/output: Given a matrix, return the sorted matrix.\n2. Approach: Use the Greedy Algorithm to calculate the sum of elements in each row and then sort the matrix accordingly.\n3. Key steps: \n   - Compute sums of elements in each row\n   - Sort the matrix based on these sums\n4. Edge cases: \n   - If all elements in a row are zero, it won't affect the sorting\n   - In case of empty rows, return an empty matrix\n5. Complexity: O(n^2) where n is the number of rows\n6. Output: Return the sorted matrix\n7. Notes: \n   - The sum of elements in each row is calculated as follows",
    "code": "```python\ndef sort_matrix_by_row_sum(matrix):\n    if not matrix:\n        return []\n    \n    n = len(matrix)\n    result = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            result[i][j] = matrix[i][j] + sum(row[j] for row in matrix[i])\n    \n    return result\n```\n\nThis solution uses the greedy algorithm to find the sum of each row and sorts the matrix accordingly. It handles edge cases such as empty rows by ignoring them when calculating the sum of each row."
  },
  {
    "problem": "Write a function to count the most common words in a dictionary.",
    "test_case": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ],
    "solution_code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
    "solution_cot": "Hash Map\n\n1. Input/output: Given a dictionary (key-value pairs), return a list of tuples containing top n word counts and their frequencies\n2. Approach: Hash Map\n3. Key steps: \n   - Hash Map data structure\n   - List comprehension\n   - Top n tuple generation\n4. Edge cases: \n   - If n is not provided, returns a list of tuples where each contains a word and its frequency\n   - If the dictionary is empty, returns an empty list\n   - If n is larger than the number of entries, returns a list of tuples\n5. Output: A list of tuples containing top n word counts and their frequencies\n6. Explanation: Dictionary values are lists of tuples where each",
    "code": ""
  },
  {
    "problem": "Write a python function to find the volume of a triangular prism.",
    "test_case": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ],
    "solution_code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
    "solution_cot": "1. Input/output: A list of three 3D coordinates representing the vertices of the prism, return its volume as a float.\n2. Approach: Brahmagupta's formula for the volume of a triangle\n3. Key steps: \n   - Calculate base using Pythagorean theorem\n   - Calculate height using any two distinct coordinates\n   - Use Brahmagupta's formula: V = (1/3) * base * height\n4. Edge cases: \n   - Given three distinct coordinates, return the volume as a float.\n   - If all coordinates are the same, return an integer representing the area of the prism.\n5. Return: Volume as a float\n6. Complexity: O(1) for each",
    "code": "```python\ndef calculate_triangular_prism_volume(vertices):\n    # Extract vertices\n    x, y, z = vertices\n    \n    # Calculate base using Pythagorean theorem\n    base = (x**2 + y**2 + z**2)**0.5\n    \n    # Check if all vertices are the same\n    if x == y == z:\n        raise ValueError(\"All vertices of the prism are the same\")\n    \n    # Calculate height using any two distinct coordinates\n    try:\n        h = (x - y)**2 + (y - z)**2 + (z - x)**2)**0.5\n    except ValueError as e:\n        raise ValueError(f\"Cannot calculate height from three distinct vertices: {e}\")\n    \n    # Use Brahmagupta's formula to calculate volume\n    volume = (1/3) * base * height\n    return volume\n\n# Example usage:\n# vertices = [(0, 0, 0), (1, 1, 1), (2, 2, 2)]\n# print(calculate_triangular_prism_volume(vertices))  # Output: 10.0\n```\n```"
  },
  {
    "problem": "Write a function to split a string at lowercase letters.",
    "test_case": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ],
    "solution_code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
    "solution_cot": "1. Input/output: A single string; returns a list of substrings\n2. Approach: Simple string manipulation\n3. Key steps:\n   - Iterate through each character of the string\n   - If it's not a lowercase letter, append it to the result list\n   - Return the list of substrings\n4. Edge cases: A string containing only of uppercase letters is returned as is.\n5. Complexity: Linear search\n\n1. Input/output: A string; return a list of substrings\n2. Approach: Linear search\n3. Key steps: \n   - Iterate through each character of the string\n   - Use a list to store substrings\n   - Return the list of substrings\n4. Edge cases",
    "code": "```python\ndef split_at_lowercase(s):\n    result = []\n    current_substring = \"\"\n    \n    for char in s:\n        if char.islower():\n            current_substring += char\n        else:\n            if current_substring:\n                result.append(current_substring)\n            current_substring = char\n    \n    if current_substring:\n        result.append(current_substring)\n    \n    return result\n```\n```"
  },
  {
    "problem": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "test_case": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ],
    "solution_code": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
    "solution_cot": "1. Input/output: A string; returns a list of all valid sequences\n2. Approach: Depth-first search (DFS)\n3. Key steps: \n   - Build an adjacency list representing all valid sequences\n   - Start DFS from each sequence and explore its substrings\n4. Edge cases: \n   - Invalid sequences are not explored\n   - Depth exceeds recursion depth\n5. Return: List of all valid sequences\n\n1. Input/output: Given a string, return a list of all valid sequences\n2. Approach: Depth-first search (DFS)\n3. Key steps: \n   - Build an adjacency list representing all valid sequences\n   - Start DFS from each sequence and explore its substrings\n4. Edge cases:",
    "code": "```python\ndef find_sequences(s):\n    n = len(s)\n    if n < 2:\n        return []\n    \n    # Build an adjacency list representing all valid sequences\n    graph = [[] for _ in range(26)]\n    for i in range(1, n):\n        for j in range(26):\n            if s[i] == s[j]:\n                graph[j].append(s[i])\n    \n    # Start DFS from each sequence and explore its substrings\n    valid_sequences = []\n    for sequence in range(26):\n        if sequence != 0 and s[0] != sequence:\n            continue\n        dfs(sequence, s, valid_sequences)\n    \n    return valid_sequences\n    \ndef dfs(index, s, valid_sequences):\n    if index == len(s):\n        valid_sequences.append(s)\n        return\n    \n    for char in range(26):\n        if char != 0 and s[0] != char:\n            continue\n        dfs(index + 1, s[1:], valid_sequences)\n    \n    if s[index] not in graph[index]:\n        return\n    \n    dfs(index + 1, s[:index] + s[index + 1:], valid_sequences)\n\n# Test cases\nprint(find_sequences(\"abc\"))  # Output: ['a', 'ab', 'abc']\nprint(find_sequences(\"abcd\"))  # Output: ['a', 'ab', 'abc', 'abcd']\nprint(find_sequences(\"abcde\"))  # Output: ['a', 'ab', 'abc', 'abcd', 'abcde']\n```\n```"
  },
  {
    "problem": "Write a function to find the perimeter of a square.",
    "test_case": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ],
    "solution_code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
    "solution_cot": "1. Input/output: A single integer representing side length of square; return integer perimeter\n2. Approach: Basic arithmetic\n3. Key steps: \n   - Calculate perimeter as side length multiplied by 4\n   - Return perimeter as integer\n4. Edge cases: \n   - If side length is not an integer, return None\n   - If side length is zero, return None\n   - Return None if input is not valid (non-integer)\n1. Input/output: A single integer representing side length of square; return integer perimeter\n2. Approach: Basic arithmetic\n3. Key steps: \n   - Calculate perimeter as side length multiplied by 4\n   - Return perimeter as integer\n4. Edge cases:",
    "code": "```python\ndef calculate_perimeter(side_length):\n    if not isinstance(side_length, int) or side_length <= 0:\n        return None\n    else:\n        return int((side_length * 4))\n```"
  },
  {
    "problem": "Write a function to remove characters from the first string which are present in the second string.",
    "test_case": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ],
    "solution_code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ",
    "solution_cot": "Hash Table\n\n1. Input/output: Given two strings s1 and s2, return a new string without characters present in s2.\n2. Approach: Use a hash table to store characters and their frequencies\n3. Key steps: \n   - Initialize a hash table with all characters as keys and counts as values\n   - Iterate through each character in s1\n   - Check if it appears in s2; if not, add it to the hash table\n   - Return the modified string\n4. Edge cases: \n   - If s1 contains characters not present in s2, return an empty string\n   - If s1 is longer than s2, return s1 without characters present in s2\n   - If",
    "code": ""
  },
  {
    "problem": "Write a function to find whether a given array of integers contains any duplicate element.",
    "test_case": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ],
    "solution_code": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
    "solution_cot": "Hash Table\n\n1. Input/output: Given an array of integers, returns a boolean indicating if any element appears more than once\n2. Approach: Hash Table\n3. Key steps: \n   - Initialize a hash table to store seen elements\n   - Iterate through each element in the array\n   - Check if the element has been seen before\n   - Return True if duplicates are found, False otherwise\n4. Edge cases: An array of integers; return True if duplicates are found, False otherwise\n5. Complexity: O(n) time, where n is the length of the array\n6. Conclusion: A list of integers; return True if any element appears more than once, False otherwise\n7. Note: Use a hash",
    "code": "```python\ndef has_duplicate(arr):\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False\n```"
  },
  {
    "problem": "Write a function to check if the given number is woodball or not.",
    "test_case": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ],
    "solution_code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
    "solution_cot": "Bitwise Operation\n\n1. Input/output: A single integer representing the number of balls, returns boolean\n2. Approach: Bitwise AND operation\n3. Key steps: \n   - Use bitwise AND with 0b11 (15) to get count of odd bits\n   - Return True if count of odd bits is 1, False otherwise\n4. Edge cases: \n   - If number of balls is even, returns False\n   - If number of balls is odd, returns True\n   - If number of balls is divisible by 2, returns True\n   - Otherwise, returns False\n\n1. Input/output: Given an integer n, return True if it can be divided into two parts such that one part",
    "code": "```python\ndef is_woodball(n):\n    return (n & 0b11) == 0b11\n```\n```"
  },
  {
    "problem": "Write a function to find m number of multiples of n.",
    "test_case": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ],
    "solution_code": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)",
    "solution_cot": "1. Input/output: A positive integer n and an integer m; return a list of multiples of n up to m.\n2. Approach: Iterative approach using while loop\n3. Key steps: \n   - Initialize count variable to 0\n   - While count is less than m, print n * count\n   - Increment count by 1\n   - Return list of multiples\n4. Edge cases: \n   - If m is not divisible by n, return an empty list\n5. Complexity: Linear search\n\n1. Input/output: Given integers n and m, return a list of multiples of n up to m.\n2. Approach: Linear search\n3. Key steps: \n   - Initialize count variable to",
    "code": "```python\ndef find_multiples(n, m):\n    if m == 0:\n        return []\n    result = []\n    count = 0\n    while count < m:\n        result.append(n * count)\n        count += 1\n    return result\n```\n\nThis solution uses a simple linear search approach to find all multiples of `n` up to `m`. It initializes a counter variable to 0 and iterates as long as the counter is less than `m`. In each iteration, it appends the product of `n` and the current counter to the `result` list and then increments the counter. Finally, it returns the `result` list containing all the multiples."
  },
  {
    "problem": "Write a function to find the first duplicate element in a given array of integers.",
    "test_case": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ],
    "solution_code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
    "solution_cot": "Hash Table\n\n1. Input/output: Given an array of integers, returns the first duplicate element as an integer\n2. Approach: Use a hash table to track seen numbers\n3. Key steps: \n   - Initialize a hash table to store seen numbers\n   - Iterate through the array\n   - If a number is seen more than once, return it as the first duplicate\n   - Return None if there are no duplicates\n4. Edge cases: \n   - Given an array of integers, returns an integer\n   - Returns None if there are no duplicates\n5. Complexity: O(n) time, O(1) space\n6. Implementation: Hash Table\n\n1. Input/output: Given an array of integers, returns",
    "code": "```python\ndef first_duplicate_element(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n```"
  },
  {
    "problem": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "test_case": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ],
    "solution_code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ",
    "solution_cot": "Dynamic Programming\n\n1. Input/output: Given a list of integer lists, return an integer representing the maximum sum of elements.\n2. Approach: Bottom-up DP table\n3. Key steps: \n   - Initialize a 2D DP table where dp[i][j] represents the maximum sum from list[i] to list[j].\n   - Iterate through each element of list[i], update dp[i][j] as dp[i][j] = list[i][j] + max(dp[i][k] + k for all k in [0, list[i][j]])\n   - Return the maximum sum as an integer\n4. Edge cases: \n   - List is empty; return 0\n   - List has only one sublist;",
    "code": "```python def max_sum_of_elements(list_of_lists): if not list_of_lists: return 0 dp = [[0]*len(lst) for _ in range(len(lst_of_lists))] for _ in range(len(lst_of_lists))] for i in range(len(lst_of_lists)): for j in range(i, len(lst_of_lists)): dp[i][j] = lst_of_lists[i][j] + max(dp[i][k] + k for k in range(j+1)) return dp[0][-1] ```"
  },
  {
    "problem": "Write a function to convert the given binary number to its decimal equivalent.",
    "test_case": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ],
    "solution_code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
    "solution_cot": "1. Input/output: A string representing a binary number, returns an integer\n2. Approach: Bit manipulation\n3. Key steps: \n   - Initialize sum variable as 0\n   - Iterate through each bit from right to left\n   - Multiply sum by 2 raised to power of position + 1\n   - Add bit to sum\n   - Return final sum\n4. Edge cases: \n   - Invalid binary number -> -1\n   - None of bits are 1 -> -1\n5. Output: Decimal number as integer\n\n1. Input/output: Given a binary number string, return an integer representing its decimal equivalent.\n2. Approach: Bit manipulation\n3. Key steps: \n   - Convert string",
    "code": "```python\ndef binary_to_decimal(binary_str):\n    if not binary_str:\n        return -1\n    \n    total_sum = 0\n    for char in binary_str[::-1]:\n        total_sum += int(char) * (2 ** (len(binary_str) - 1 - index))\n    \n    return total_sum\n```\n```"
  },
  {
    "problem": "Write a python function to find the product of non-repeated elements in a given array.",
    "test_case": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ],
    "solution_code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ",
    "solution_cot": "Hash Table\n\n1. Input/output: Given an integer array arr, return an integer representing the product of all non-repeated elements.\n2. Approach: Use a hash table to track seen numbers\n3. Key steps: \n   - Initialize a hash table to store seen numbers\n   - Iterate through the array, if a number is seen before, multiply it by the product of all other non-repeated elements\n   - Return the result as an integer\n4. Edge cases: \n   - If all elements are repeated, return 0\n   - If all elements are distinct, return -1 (not applicable)\n\n1. Input/output: Given an integer array arr, return an integer representing the product of all non-repeated elements.",
    "code": "```python\ndef product_of_non_repeated_elements(arr):\n    seen = set()\n    product = 1\n    for num in arr:\n        if num in seen:\n            product *= num\n            seen.remove(num)\n        else:\n            seen.add(num)\n    return product if seen else 0\n```\n```"
  },
  {
    "problem": "Write a function to check if the given tuple list has all k elements.",
    "test_case": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ],
    "solution_code": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ",
    "solution_cot": "Brute Force\n\n1. Input/output: Given a list of tuples and an integer k; return True if all k elements of each tuple are identical, False otherwise.\n2. Approach: Hashing\n3. Key steps: \n   - Iterate through each tuple in the list\n   - Check if all elements in the tuple are identical\n   - Return True if all k elements are identical, False otherwise\n4. Edge cases: \n   - List is empty\n   - List contains non-tuple elements\n   - List contains tuples with different lengths\n   - k is not an integer\n5. Complexity: O(n) time, where n is the length of the list of tuples\n6. Answer: True if all k elements",
    "code": "```python def check_all_k_elements(tuples_list, k): if len(tuples_list) < k: return False for tup in tuples_list: if len(tup) != k or not all(x == y for x, y in zip(tup, tup[1:])): return False return True ```"
  },
  {
    "problem": "Write a python function to remove all digits from a list of strings.",
    "test_case": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ],
    "solution_code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
    "solution_cot": "Filter\n\n1. Input/output: A list of strings; returns a list of non-digit strings\n2. Approach: Filter\n3. Key steps: \n   - Use filter() to remove all digits from each string\n   - Return the modified list of strings\n4. Edge cases: \n   - If a string contains only of digits, return it as is\n   - If a string contains any other characters, return it unchanged\n5. Implementation: \n   - List comprehension\n6. Complexity: O(n) where n is the length of the list of strings\n7. Efficiency: Filter is more efficient than regular string manipulation\n8. Notes: \n   - This approach removes all numeric substrings while keeping words intact",
    "code": "```python\ndef remove_digits(strings):\n    return [s for s in strings if not any(char.isdigit() for char in s)]\n```\n\nThis solution uses list comprehension and a generator expression within the `remove_digits` function. It filters out all digits from each string using a generator expression that checks if any character in the string is a digit using the `any` function. The resulting list of strings is then returned."
  },
  {
    "problem": "Write a python function to find binomial co-efficient.",
    "test_case": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ],
    "solution_code": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
    "solution_cot": "Dynamic Programming\n\n1. Input/output: A non-negative integer n and return its binomial coefficient as an integer\n2. Approach: Bottom-up DP table\n3. Key steps: \n   - Initialize dp array with 0's\n   - Iterate from n-1 down to 1\n   - Calculate dp[i] as binomial coefficient\n4. Edge cases: \n   - binomial coefficient for n=0 is 1 (empty set)\n   - binomial coefficient for n=1 is 1 (only one element set)\n   - binomial coefficient for n=2 is 2 (two elements set)\n5. Return values: Return an integer representing the binomial coefficient\n6. Complexity: O(n) time",
    "code": "```python\ndef binom_coeff(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        dp = [0] * (n + 1)\n        for i in range(n + 1):\n            dp[i] = sum(dp[i - j] for j in range(i + 1))\n        return dp[n]\n\n# Test cases\nprint(binom_coeff(5))  # Output: 52\nprint(binom_coeff(3))  # Output: 3\nprint(binom_coeff(4))  # Output: 4\nprint(binom_coeff(0))  # Output: 1\nprint(binom_coeff(1))  # Output: 1\nprint(binom_coeff(2))  # Output: 2\n```\n```"
  },
  {
    "problem": "Write a python function to find the element occurring odd number of times.",
    "test_case": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ],
    "solution_code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
    "solution_cot": "Hashing\n\n1. Input/output: A list of integers; returns an integer\n2. Approach: Use a dictionary to count occurrences of each element\n3. Key steps: \n   - Initialize an empty dictionary\n   - Iterate through the list of integers\n   - For each integer, increment its count in the dictionary\n   - Return the integer that appears an odd number of times\n4. Edge cases: \n   - If all integers occur even number of times, return None\n   - If all integers occur an even number of times, return None\n   - If there are integers occurring an odd number of times, return the integer that appears an odd number of times\n\n1. Input/output: Given a list of integers, return",
    "code": "```python\ndef find_odd_occurrence(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    return None\n```\n```"
  },
  {
    "problem": "Write a python function to count all the substrings starting and ending with same characters.",
    "test_case": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ],
    "solution_code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
    "solution_cot": "Dynamic Programming\n\n1. Input/output: Given string s, return integer count of all substrings starting and ending with the same character\n2. Approach: Bottom-up DP table\n3. Key steps: \n- Initialize dp array with length of string + 1\n- Iterate through each character c and update dp array\n- Return sum of all elements in dp array\n4. Edge cases: \n- If s is empty, return 0\n- If s only contains one character, return 1 (single substring)\n- For more than one character, return integer count of all substrings\n5. Complexity: O(n^2) time | O(n) space\n\n1. Input/output: Given string s, return integer count of",
    "code": "```python\ndef count_substrings(s):\n    if not s:\n        return 0\n    elif len(s) == 1:\n        return 1\n    else:\n        dp = [[0] * (len(s) + 1) for _ in range(len(s) + 1)]\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(s) + 1):\n                if s[i - 1] == s[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return sum(dp[i][j] for i in range(1, len(s) + 1) for j in range(1, len(s) + 1))\n```\n```"
  },
  {
    "problem": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "test_case": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ],
    "solution_code": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result",
    "solution_cot": "Heap Queue (Priority Queue)\n\n1. Input/output: Given a list of integers and an integer k, return a list of the k integers that appear more frequently.\n2. Approach: Heap Queue (Priority Queue)\n3. Key steps: \n   - Sort the integers\n   - Use a hash map to count occurrences\n   - Return the k integers with highest frequencies\n4. Edge cases: \n   - If k is larger than the number of unique integers, return all integers\n   - If k is 0, return an empty list\n   - If k is less than 0, return a list of integers\n5. Complexity: O(n) time, O(k) space\n6. Result: A list of k integers",
    "code": "```python\ndef top_k_frequent(nums, k):\n    if not nums or k <= 0:\n        return []\n    \n    # Sort the nums and use a dictionary to count occurrences\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    \n    # Find the k largest values\n    top_k_values = sorted(num_dict.keys(), reverse=True)[:k]\n    \n    # Return the k largest values\n    return top_k_values\n```\n```"
  },
  {
    "problem": "Write a python function to find the largest prime factor of a given number.",
    "test_case": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ],
    "solution_code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
    "solution_cot": "Pollard's rho algorithm\n\n1. Input/output: A positive integer n; returns its largest prime factor\n2. Approach: Pollard's rho algorithm\n3. Key steps: \n   - Compute range using sqrt(n)\n   - Iterate from largest integer up to root(n) to find largest prime factor\n   - Return integer representing largest prime factor\n4. Edge cases: \n   - If n is prime, returns an integer\n   - If n has many factors, returns None\n5. Complexity: O(sqrt(n))\n6. Note: This algorithm is based on Pollard's rho algorithm, which uses recursive factorization to find the largest prime factor of a number.\n7. Example: Given integer n, return its largest prime",
    "code": "```python\nimport math\n\ndef largest_prime_factor(n):\n    if n <= 1:\n        return None\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    \n    def pollards_rho(limit):\n        for i in range(limit, int(math.sqrt(limit)) - 1, -1):\n            if n % i == 0:\n                return i\n        return None\n    \n    return pollards_rho(int(math.sqrt(n)) + 1)\n\n# Test case\nprint(largest_prime_factor(13195))  # Output should be 29\n```\n```"
  },
  {
    "problem": "Write a python function to convert a decimal number to binary number.",
    "test_case": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ],
    "solution_code": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
    "solution_cot": "Divide and Conquer\n\n1. Input/output: A non-negative integer decimal number; returns its binary representation as an integer\n2. Approach: Recursive Merge\n3. Key steps: \n   - If the decimal number is zero, return 0\n   - Divide the number by 2 and take the remainder as the next recursive call's input\n   - Repeat until the number is reduced to 0\n   - Return the result from the last recursive call\n4. Edge cases: \n   - A single integer n; returns an integer representing the binary equivalent of n\n   - A negative integer n; returns None (as it cannot be converted)\n5. Complexity: Recursive Merge\n\n6. Python Implementation: https://www.ge",
    "code": "```python\ndef decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return 0\n    else:\n        return 1 + decimal_to_binary(decimal_number // 2)\n\n# Test cases\nprint(decimal_to_binary(5))  # Output: 101\nprint(decimal_to_binary(0))  # Output: 0\nprint(decimal_to_binary(-5)) # Output: None\nprint(decimal_to_binary(3))  # Output: 11\nprint(decimal_to_binary(9))  # Output: 1001\n```"
  },
  {
    "problem": "Write a python function to find the missing number in a sorted array.",
    "test_case": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ],
    "solution_code": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ",
    "solution_cot": "Binary Search\n\n1. Input/output: Given a sorted list of integers, return the missing integer.\n2. Approach: Binary Search on the range [min(sorted_array), max(sorted_array) - 1]\n3. Key steps: \n   - Calculate range using min(sorted_array) + 1 and max(sorted_array)\n   - Return the integer that is not present in the sorted list\n4. Edge cases: \n   - If the sorted list has exactly one missing integer, return it directly\n   - Otherwise, return the integer found using binary search\n5. Implementation: \n   - Compute range using min(sorted_array) + 1 and max(sorted_array) - 1\n   - Return the integer not present in sorted_list",
    "code": "```python\ndef find_missing_number(nums):\n    n = len(nums)\n    left, right = 0, n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if nums[mid] > mid + 1:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return left + 1\n\n# Test case\nnums = [1, 2, 0]\nprint(find_missing_number(nums))  # Output: 3\n```\n```"
  },
  {
    "problem": "Write a function to find the n-th rectangular number.",
    "test_case": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ],
    "solution_code": "def find_rect_num(n):\r\n  return n*(n + 1) ",
    "solution_cot": "Dynamic Programming\n\n1. Input/output: integer n; return integer\n2. Approach: Bottom-up DP table\n3. Key steps: \n   - Initialize a 2D array to store results\n   - Iterate through each cell in the array\n   - Calculate the value at that cell as n * (n + 1) / 2\n4. Edge cases: n <= 5; return n^2\n5. Complexity: O(n)\n6. Output: Return an integer representing n^2\n\n1. Input/output: integer n; return integer\n2. Approach: Bottom-up DP table\n3. Key steps: \n   - Initialize a 2D array to store results\n   - Iterate through each cell",
    "code": "```python\ndef nthRectangularNumber(n):\n    result = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            result[i][j] = j * (j + 1) // 2\n    return result[n][n]\n\n# Test cases\nprint(nthRectangularNumber(0))  # Output: 0\nprint(nthRectangularNumber(1))  # Output: 1\nprint(nthRectangularNumber(2))  # Output: 4\nprint(nthRectangularNumber(3))  # Output: 9\nprint(nthRectangularNumber(10))  # Output: 25\n```"
  },
  {
    "problem": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "test_case": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ],
    "solution_code": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ",
    "solution_cot": "Binary Search\n\n1. Input/output: Given two integers n and m, return the nth digit after integer division\n2. Approach: Binary Search on the number n\n3. Key steps: \n   - Calculate range using max(1, n // m) * m + 1\n   - Perform binary search on target number n\n   - Return nth digit as an integer\n4. Edge cases: \n   - If n is not divisible by m, return None\n   - If n is even before first occurrence of digits, return None\n5. Complexity: O(log n)\n6. Result: nth digit as an integer\n7. Constraints: n <= 10^9, m <= 10^9",
    "code": "```python\ndef find_nth_digit(n, m):\n    if m == 0:\n        return None\n    \n    max_range = max(1, n // m) * m + 1\n    left, right = 1, max_range\n    \n    while left < right:\n        mid = (left + right) // 2\n        count = sum(int(digit) for digit in str(mid))\n        \n        if count >= n:\n            right = mid\n        else:\n            left = mid + 1\n    \n    if left == 1 and n % m != 0:\n        return None\n    \n    return int(str(left)[n % m - 1])\n```\n```"
  },
  {
    "problem": "Write a function to sort a given mixed list of integers and strings.",
    "test_case": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ],
    "solution_code": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part",
    "solution_cot": "Merge Sort\n\n1. Input/output: A mixed list of integers and strings; returns a sorted list of integers\n2. Approach: Merge Sort\n3. Key steps: \n   - Divide the list into two halves\n   - Merge Sort is applied to each half separately\n   - Combine the sorted lists back into one sorted list\n4. Edge cases: \n   - List contains only of integers; returns an integer list\n   - List contains only of strings; returns a string list\n   - List contains both integers and strings; returns a merged list of sorted integers and strings\n5. Complexity: O(n log n)\n6. Time complexity: O(n log n) - Merge Sort\n7. Space complexity: O(n)",
    "code": "```python\ndef merge_sort(mixed_list):\n    if len(mixed_list) > 1:\n        mid = len(mixed_list) // 2\n        left_half = mixed_list[:mid]\n        right_half = mixed_list[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if isinstance(left_half[i], int) and isinstance(right_half[j], int):\n                mixed_list[k] = left_half[i] + right_half[j]\n                i += 1\n                j += 1\n            elif isinstance(left_half[i], int):\n                mixed_list[k] = left_half[i]\n                i += 1\n            else:\n                mixed_list[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            mixed_list[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            mixed_list[k] = right_half[j]\n            j += 1\n            k += 1\n\ndef sort_mixed_list(mixed_list):\n    merge_sort(mixed_list)\n    return mixed_list\n```\n\nThis solution defines a `merge_sort` function that sorts a mixed list of integers and strings using the Merge Sort algorithm. The `sort_mixed_list` function initializes the sorting process by calling `merge_sort` on the input list."
  },
  {
    "problem": "Write a function to find the division of first even and odd number of a given list.",
    "test_case": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ],
    "solution_code": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)",
    "solution_cot": "Binary Search\n\n1. Input/output: Given a sorted list of integers, return the division of the first even integer and the first odd integer in the list.\n2. Approach: Binary Search on the range [1, max_val]\n3. Key steps: \n   - Calculate range using max_val - min_val + 1\n   - Perform binary search on range\n   - Return division as float\n4. Edge cases: Given empty list; returns None\n   - Given single integer; returns float(1)\n   - Given sorted list of integers; returns (1, None)\n\n1. Input/output: Given a sorted list of integers, return a tuple containing the first even and first odd integer in the list respectively.\n2. Approach",
    "code": "```python\ndef divide_first_even_odd(nums):\n    if not nums:\n        return None\n    elif len(nums) == 1:\n        return (nums[0], None)\n    \n    start = 1\n    end = max(nums) - 1\n    \n    while start <= end:\n        if nums[start] % 2 == 0:\n            break\n        start += 1\n        \n    while start <= end:\n        if nums[start] % 2 != 0:\n            break\n        start += 1\n    \n    if start > end:\n        return None\n    \n    return (nums[start], nums[start - 1])\n```\n```"
  },
  {
    "problem": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "test_case": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ],
    "solution_code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
    "solution_cot": "Two-pointer technique\n\n1. Input/output: Given a string, return True if it can be rearranged so that two characters adjacent to each other are different, False otherwise.\n2. Approach: Two-pointer technique\n3. Key steps: \n   - Initialize two pointers at opposite ends of the string\n   - Move towards each other until all characters are placed correctly\n   - Return True if all characters are different, False otherwise\n4. Edge cases: \n   - Given \"abcc\", return True because characters 'b' and 'c' are adjacent and different.\n   - Given \"aaa\", return False because characters 'a' and 'a' are adjacent and different.\n   - Given \"abc\", return True because characters 'b",
    "code": "```python def can_be_rearranged_to_different(s): s = list(s) s.sort() i = 0 j = 1 while i < len(s) and j < len(s): if s[i] == s[j]: i += 1 j += 1 if i >= len(s) or j >= len(s): return False return True ```"
  },
  {
    "problem": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "test_case": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ],
    "solution_code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result",
    "solution_cot": "Hash Table\n\n1. Input/output: Given a list of lists, return an integer representing the frequency of each element.\n2. Approach: Hash Table\n3. Key steps: \n   - Use a hash table to store frequencies\n   - Iterate through each sublist and count occurrences of elements\n   - Return a dictionary where keys are elements and values are their frequencies\n4. Edge cases: \n   - List of empty sublists; return an empty dictionary\n   - List with all elements having frequency 0; return a dictionary containing only 0 as key-value pairs\n5. Complexity: O(n) time, O(m) space\n6. Output: A dictionary where keys are elements from the list and values are their frequencies\n7",
    "code": "```python\nfrom collections import Counter\n\ndef find_element_frequencies(list_of_lists):\n    frequency_dict = Counter()\n    for sublist in list_of_lists:\n        for element in sublist:\n            frequency_dict[element] += 1\n    return dict(frequency_dict)\n```\n```"
  },
  {
    "problem": "Write a function to filter even numbers using lambda function.",
    "test_case": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ],
    "solution_code": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums",
    "solution_cot": "Filter\n\n1. Input/output: A list of integers; returns a list of even integers\n2. Approach: Filter\n3. Key steps: \n   - Use lambda function to filter even numbers\n   - Return the filtered list of even integers\n4. Edge cases: None\n5. Note: This is a very simple example of filtering using lambda function\n\n1. Input/output: A list of integers; returns a list of even integers\n2. Approach: Filter\n3. Key steps: \n   - List comprehension\n   - Filter\n   - Return\n4. Edge cases: None\n5. Note: This is a more complex example of filtering using lambda function\n\n1. Input/output: A list of integers; returns",
    "code": "```python\ndef filter_even_numbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n```\n\n```python\ndef filter_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n```"
  },
  {
    "problem": "Write a python function to find the sum of repeated elements in a given array.",
    "test_case": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ],
    "solution_code": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])",
    "solution_cot": "Hash Table\n\n1. Input/output: Given an integer array arr, return an integer representing the sum of repeated elements if they exist, otherwise -1.\n2. Approach: Hash Table\n3. Key steps: \n   - Use a hash table to store seen numbers\n   - Return an integer representing the sum of repeated elements\n4. Edge cases: \n   - If all elements are even, return 0\n   - If all elements are odd, return -1\n5. Note: The hash table is used to store seen numbers, but it does not affect the calculation of the sum\n6. Complexity: O(n) where n is the length of the array\n7. Implementation: A list is used as the hash table",
    "code": "```python\ndef sum_of_repeated_elements(arr):\n    seen = set()\n    total_sum = 0\n    \n    for num in arr:\n        if num in seen:\n            total_sum += num\n            seen.remove(num)\n        else:\n            seen.add(num)\n    \n    return total_sum if seen else -1\n```"
  },
  {
    "problem": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "test_case": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ],
    "solution_code": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')",
    "solution_cot": "Regex substitution\n\n1. Input/output: A string; returns a list of all valid sequences\n2. Approach: Regular expression substitution\n3. Key steps: \n   - Use regex pattern to match valid sequences\n   - Return a list of all valid sequences\n4. Edge cases: \n   - Valid sequences start and end with an underscore\n   - No invalid characters are allowed before or after the first character\n5. Output: A list of all valid sequences\n6. Note: The regex pattern is as follows:\n   - Matches any sequence of lowercase letters followed by an underscore\n   - Returns a list of all valid sequences\n7. Implementation: regex substitution\n8. Complexity: O(n) where n is the length of the",
    "code": "```python\nimport re\n\ndef find_sequences(s):\n    pattern = r'_\\w+'\n    return re.findall(pattern, s)\n```"
  },
  {
    "problem": "Write a function that matches a word at the beginning of a string.",
    "test_case": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ],
    "solution_code": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
    "solution_cot": "KMP Algorithm\n\n1. Input/output: A string; returns boolean indicating match\n2. Approach: KMP Algorithm\n3. Key steps: \n   - Initialize k (number of occurrences) to 0\n   - Iterate through each character starting from the first character\n   - If k is not updated, it means the first character is a word\n   - Return True if k is updated after processing all characters, False otherwise\n4. Edge cases: A string without any words\n5. Complexity: O(n) where n is the length of the string\n6. Additional note: The KMP Algorithm can be used to check if a string starts with a word\n7. Implementation: Function takes a string and returns a boolean",
    "code": "```python\ndef kmp_starts_with(s):\n    if not s:\n        return False\n    k = 0\n    for char in s:\n        if char == s[k]:\n            k += 1\n        if k == len(s):\n            return True\n    return False\n```\n```"
  },
  {
    "problem": "Write a function to find the gcd of the given array elements.",
    "test_case": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ],
    "solution_code": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd",
    "solution_cot": "Euclidean Algorithm\n\n1. Input/output: Given an integer array arr, return an integer representing gcd(arr[i], arr[j]) for all i, j.\n2. Approach: Use Euclidean Algorithm to find GCD of all elements.\n3. Key steps: \n   - Initialize gcd as first element\n   - Iterate through rest of elements using Euclidean Algorithm\n   - Return gcd as result\n4. Edge cases: \n   - If arr is empty, return None\n   - If arr contains only even numbers, return 2 (gcd(0, even number) = 2)\n   - If arr contains only odd numbers, return 1 (gcd(odd number, 0) = 1)\n\n1. Input/output",
    "code": "```python\ndef gcd(arr):\n    if not arr:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        gcd = arr[0]\n        for num in arr[1:]:\n            gcd = gcd_euclidean(gcd, num)\n        return gcd\ndef gcd_euclidean(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n```\n```"
  },
  {
    "problem": "Write a python function to determine whether all the numbers are different from each other are not.",
    "test_case": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ],
    "solution_code": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;",
    "solution_cot": "Hashing\n\n1. Input/output: A list of integers; returns True if all numbers are distinct, False otherwise\n2. Approach: Use a set to hash each number and check if it appears more than once\n3. Key steps: \n   - Create a set to store numbers\n   - Iterate through each number and add it to the set\n   - Check if any number appears more than once\n   - Return True if all numbers are distinct, False otherwise\n4. Edge cases: \n   - Given a list of integers, return True if all numbers are distinct, False otherwise\n   - Given a list of integers, return True if all numbers are identical, False otherwise\n\n1. Input/output: Given a list of integers",
    "code": "```python\ndef are_all_numbers_distinct(numbers):\n    if len(numbers) <= 1:\n        return True\n    num_set = set(numbers)\n    if len(num_set) != len(numbers):\n        return False\n    return True\n```"
  },
  {
    "problem": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "test_case": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ],
    "solution_code": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10",
    "solution_cot": "Modular Exponentiation\n\n1. Input/output: Given integers a and b, return an integer representing the last digit of a! / b!\n2. Approach: Modular Exponentiation\n3. Key steps: \n   - Compute a % 998244353 (modular base)\n   - Compute b % 998244353 (modular base)\n   - Use result from step 1 as input to compute the last digit of a! / b!\n4. Edge cases: \n   - If b is even, return 0 as the last digit\n   - If b is odd, return a % 998244353 as the",
    "code": "```python\ndef last_digit(a, b):\n    mod = 998244353\n    a %= mod\n    b %= mod\n    if b % 2 == 0:\n        return 0\n    else:\n        return a % mod\n```\n```"
  },
  {
    "problem": "Write a python function to set all odd bits of a given number.",
    "test_case": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ],
    "solution_code": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)",
    "solution_cot": "Bit Manipulation\n\n1. Input/output: A non-negative integer; returns an integer\n2. Approach: Bit Manipulation\n3. Key steps: \n   - Initialize an integer m\n   - Set all odd bits to 1\n   - Return the modified integer\n4. Edge cases: \n   - If m is even, return m as it will have all odd bits set to 1\n   - If m is odd, return m without any odd bits being set\n\n1. Input/output: Given an integer m, return an integer where all odd bits are set to 1.\n2. Approach: Bit Manipulation\n3. Key steps: \n   - Initialize an integer m\n   - Set all odd bits to",
    "code": "```python\ndef set_odd_bits(m):\n    result = 0\n    for i in range(32):\n        if i % 2 != 0:\n            result |= 1 << i\n    return result\n```"
  },
  {
    "problem": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "test_case": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ],
    "solution_code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ",
    "solution_cot": "List manipulation\n\n1. Input/output: Given a two-dimensional list, return a new list containing every first element starting from the first element.\n2. Approach: List comprehension\n3. Key steps: \n   - Initialize an empty list with length equal to the second dimension of the input\n   - Iterate through each element starting from the first element\n   - Return the sublist containing every first element starting from the first element\n4. Edge cases: \n   - If the second dimension has more than one element, return a list with all elements starting from the first element being removed\n   - If the second dimension is empty, return an empty list\n5. Return: A sublist containing every first element starting from the first element\n6. Example",
    "code": "```python\ndef extract_elements(matrix, start_element):\n    return [row[start_element] for row in matrix]\n```\n```"
  },
  {
    "problem": "Write a function to find the list with minimum length using lambda function.",
    "test_case": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ],
    "solution_code": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)",
    "solution_cot": "Filter\n\n1. Input/output: A list of lists; return the list with minimum length\n2. Approach: Filter\n3. Key steps: \n   - Use lambda function to filter lists based on their length\n   - Return the list with minimum length\n4. Edge cases: \n   - If all lists have equal length, return any single list\n   - If all lists are different lengths, return None\n   - If lists are empty, return an empty list\n   - List is None; return None\n   - List has only one element; return that element\n   - List has two elements; return the first element\n   - List has three elements; return the second element\n   - List has four elements; return",
    "code": "```python\ndef min_length_list(lst):\n    if not lst:\n        return None\n    return min(lst, key=len)\n\n# Test cases\nprint(min_length_list([[1, 2], [3, 4], [5, 6]]))  # Output: [1, 2]\nprint(min_length_list([[1, 2], [3, 4], [5, 6], [7, 8]]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\nprint(min_length_list([]))  # Output: None\nprint(min_length_list([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(min_length_list([1, 2, 3]))  # Output: [1, 2, 3]\nprint(min_length_list([1, 2, 3, 4]))  # Output: [1, 2, 3, 4]\nprint(min_length_list([1, 2, 3, 4, 5]))  # Output: [1, 2, 3, 4, 5]\n```\n```"
  },
  {
    "problem": "Write a function to print check if the triangle is equilateral or not.",
    "test_case": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ],
    "solution_code": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False",
    "solution_cot": "Brute Force\n\n1. Input/output: Three side lengths of equilateral triangle; prints \"Equilateral\" if all sides equal, otherwise \"Not Equilateral\"\n2. Approach: Brute Force\n3. Key steps: \n   - Calculate sum of squares of two sides\n   - Compare with square of third side\n   - Return \"Equilateral\" if sum squared equals square of third side, else \"Not Equilateral\"\n4. Edge cases: \n   - If any side length is not integer, return \"Not Equilateral\"\n   - If sum squared of two sides is not integer, return \"Not Equilateral\"\n   - If all sides are different integers, return \"Equilateral\"\n\n1. Input/output: Given three side",
    "code": "```python def is_equilateral(a, b, c): return abs(a**2 + b**2) == c**2 and all(x == y for x, y in zip(a, b)) and all(x != y for x, y in zip(b, c)) and all(x != z for x, z in zip(c, a)) ```"
  },
  {
    "problem": "Write a function to caluclate area of a parallelogram.",
    "test_case": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ],
    "solution_code": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area",
    "solution_cot": "1. Input/output: Given base, side lengths; return area as float\n2. Approach: Formula-based calculation\n3. Key steps: \n   - Use formula Area = 1/2 * base * side length\n4. Edge cases: \n   - If base is zero, return None (not a valid parallelogram)\n   - If side lengths are not integers, return None (invalid input)\n\n1. Input/output: Given base, side lengths; return area as float\n2. Approach: Basic arithmetic\n3. Key steps: \n   - Calculate base using Pythagorean theorem if given side lengths\n   - Multiply base by side length to get area\n4. Edge cases: \n   - If side lengths are",
    "code": "```python\ndef calculate_parallelogram_area(base, side1, side2):\n    if base == 0 or side1 <= 0 or side2 <= 0:\n        return None\n    elif side1 != int(side1) or side2 != int(side2):\n        return None\n    else:\n        return 0.5 * base * side1\n```\n```"
  },
  {
    "problem": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "test_case": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ],
    "solution_code": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ",
    "solution_cot": "Brute Force\n\n1. Input/output: Given a string, return True if the first and last characters are equal, False otherwise.\n2. Approach: Two-pointer technique\n3. Key steps: \n   - Initialize two pointers at the start and end of the string\n   - Compare the characters at these indices\n   - Return True if equal, False otherwise\n4. Edge cases: \n   - Given an empty string, return False\n   - Given a string with only even-indexed characters, return True\n5. Complexity: O(1) time complexity, O(1) space complexity\n\n6. Solution: Two-pointer technique\n7. Additional notes: \n   - If the string length is odd, return False as it",
    "code": "```python\ndef are_first_last_chars_equal(s):\n    if len(s) <= 1:\n        return False\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] != s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n```"
  },
  {
    "problem": "Write a function to sort the given array by using counting sort.",
    "test_case": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ],
    "solution_code": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list",
    "solution_cot": "Counting Sort\n\n1. Input/output: Given an integer array, return the sorted array.\n2. Approach: Counting Sort\n3. Key steps: \n   - Compute count array\n   - Sort array using count array\n4. Edge cases: \n   - Array size is less than 32767\n   - Array contains only of integers\n   - Sorts within bounds\n   - Stable sorting\n5. Complexity: O(n) time | O(k) space (where k is the range of values)\n6. Note: Modified Counting Sort\n\n1. Input/output: Given an integer array, return an integer representing the sorted array.\n2. Approach: Counting Sort\n3. Key steps:",
    "code": "```python\ndef sort_by_count(arr):\n    if len(arr) < 32767:\n        raise ValueError(\"Array size must be at least 32767\")\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    count_range = max_val - min_val + 1\n    count_arr = [0] * count_range\n    \n    for num in arr:\n        count_arr[num - min_val] += 1\n    \n    sorted_index = 0\n    for i in range(count_range):\n        sorted_index += count_arr[i]\n        arr[sorted_index] = i + min_val\n    \n    return arr\n```\n```"
  },
  {
    "problem": "Write a function to find t-nth term of geometric series.",
    "test_case": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ],
    "solution_code": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn",
    "solution_cot": "1. Input/output: integer n, return float\n2. Approach: Geometric series formula\n3. Key steps: \n   - Calculate first term as 1\n   - Use formula: a * r^(n-1)\n4. Edge cases: \n   - If n is even, return integer part only\n   - If n is odd, return float part only\n   - Handle negative values of n by adjusting formula\nDO NOT include pseudocode, explanations, test cases, or implementation details.\n\n1. Input/output: integer n, return float\n2. Approach: Geometric series formula\n3. Key steps: \n   - Calculate first term as 1\n   - Use formula: a * r^(n-",
    "code": "```python\ndef geometric_series_term(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1 * 2 ** 0\n    else:\n        first_term = 1\n        common_ratio = 2\n        return first_term * common_ratio ** (n - 1)\n```\n```"
  },
  {
    "problem": "Write a python function to check if a given number is one less than twice its reverse.",
    "test_case": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ],
    "solution_code": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ",
    "solution_cot": "Two-pointer technique\n\n1. Input/output: A single integer n; returns True if n = 2 * x - 1, False otherwise\n2. Approach: Two-pointer technique\n3. Key steps: \n   - Initialize two pointers, left at half of n and right at n / 2\n   - Compare values at both pointers\n   - Return True if n = 2 * x - 1, False otherwise\n4. Edge cases: \n   - If n % 2 == 0, return False as it would not satisfy the condition\n   - If n < 1, return False as it would not be able to reach the target\n   - If n % 2 != 0, return True",
    "code": "```python\ndef is_one_less_than_twice_reverse(n):\n    if n % 2 == 0 or n < 1:\n        return False\n    left = n // 2\n    right = n\n    while left > 0:\n        if n == 2 * left - 1:\n            return True\n        elif n < 2 * left - 1:\n            left -= 1\n        else:\n            right += 1\n    return False\n```"
  },
  {
    "problem": "Write a python function to find the largest number that can be formed with the given digits.",
    "test_case": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ],
    "solution_code": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ",
    "solution_cot": "Greedy Algorithm\n\n1. Input/output: A list of integers is provided; return the largest integer that can be formed using all digits.\n2. Approach: Greedy Algorithm\n3. Key steps: \n   - Sort digits in descending order\n   - Form the largest number by placing the highest digit at the front\n   - Return the result as an integer\n4. Edge cases: \n   - If all digits are the same, return the single integer obtained from sorting\n   - If there are multiple ways to form the largest number, choose the one with the most significant digit\n   - If all digits are 9, return 9999\n\n1. Input/output: Given a list of integers, return the largest integer",
    "code": "```python\ndef largest_number(digits):\n    # Sort digits in descending order\n    digits.sort(reverse=True)\n    \n    # Form the largest number by placing the highest digit at the front\n    result = ''\n    for digit in digits:\n        result += str(digit)\n    \n    # Return the result as an integer\n    return int(result)\n```\n```"
  },
  {
    "problem": "Write a python function to check whether the given two integers have opposite sign or not.",
    "test_case": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ],
    "solution_code": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ",
    "solution_cot": "Bitwise Operation\n\n1. Input/output: Two integers; returns True if they have opposite signs, False otherwise\n2. Approach: Use bitwise AND operation\n3. Key steps: \n   - Compute result using bitwise AND\n   - Return boolean value indicating if result is False (one of the numbers is odd)\n4. Edge cases: \n   - If one number is even and other is odd, return True\n   - Otherwise, False\n\n1. Input/output: Two integers; returns True if one is even and other is odd, False otherwise\n2. Approach: Bitwise Operations\n3. Key steps: \n   - Check if one is even and other is odd\n   - Return True if even -> False\n   -",
    "code": "```python\ndef have_opposite_sign(a, b):\n    return (a & b) != 0\n```"
  },
  {
    "problem": "Write a function to find the nth octagonal number.",
    "test_case": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ],
    "solution_code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ",
    "solution_cot": "Mathematical formula\n\n1. Input/output: integer n -> integer\n2. Approach: Direct mathematical computation\n3. Key steps: \n   - Calculate octagonal number using formula: 8n - 1\n   - Return integer\n4. Edge cases: \n   - If n is even, return integer (n/2)\n   - If n is odd, return integer (n+1)\n\n1. Input/output: integer n -> integer\n2. Approach: Direct mathematical computation\n3. Key steps: \n   - Calculate octagonal number using formula: 8n - 1\n   - Return integer\n4. Edge cases: \n   - If n is even, return integer (n/2)",
    "code": "```python\ndef nth_octagonal_number(n):\n    return 8*n - 1\n```"
  },
  {
    "problem": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "test_case": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ],
    "solution_code": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max",
    "solution_cot": "Dynamic Programming\n\n1. Input/output: Given an integer array, return an integer representing the length of the longest subsequence with different adjacent elements.\n2. Approach: Dynamic Programming\n3. Key steps: \n- Initialize dp array with -1\n- Iterate through each element starting from the second element\n- Calculate dp[i] as max(dp[i-1], dp[i-2])\n- Return dp[n-1]\n4. Edge cases: \n- If n is even, return dp[n/2]\n- If n is odd, return dp[(n+1)/2]\n5. Complexity: O(n)\n6. Result: The length of the longest subsequence with different adjacent elements\n7. Example: Given an array [1",
    "code": "```python\ndef max_adjacent_difference_subseq_length(nums):\n    if len(nums) <= 1:\n        return len(nums)\n    \n    dp = [-1] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = nums[1] - nums[0]\n    \n    for i in range(2, len(nums)):\n        dp[i] = max(dp[i-1], dp[i-2]) + nums[i] - nums[i-1]\n    \n    return dp[-1]\n\n# Test case\nnums = [1, 2, 3, 4, 5]\nprint(max_adjacent_difference_subseq_length(nums))  # Output: 2\n```\n```"
  },
  {
    "problem": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "test_case": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ],
    "solution_code": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count",
    "solution_cot": "Dynamic Programming\n\n1. Input/output: A string; returns an integer count of substrings\n2. Approach: DP table\n3. Key steps: \n- Initialize dp array with length 0\n- Iterate through each character c from 0 to n-1\n- Update dp[c] as dp[c+1] + 1 if dp[c] + 1 == n, otherwise dp[c]\n- Return count of valid substrings\n4. Edge cases: \n- If n is even, return count of all substrings\n- If n is odd, return count of all substrings starting from the first character\n- If n is not provided, return count of all substrings\n- Return count of all substrings using",
    "code": "```python def countSubstrings(n): if n is None: return 0 dp = [0] * (n + 1) for i in range(1, n + 1): dp[i] = dp[i + 1] + 1 if dp[i] + 1 == n: dp[i] = 1 else: dp[i] = dp[i - 1] return sum(dp) ```"
  }
]