[
  {
    "problem": "Write a python function to remove first and last occurrence of a given character from the string.",
    "test_case": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ],
    "solution_code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
    "solution_cot": "1. Define an empty list named 'chars' to store characters that need to be removed.\n2. Use a while loop to iterate through each character in the input string.\n   - Check if the current character is equal to the target character.\n   - If it matches, append the current character to the 'chars' list.\n   - After iterating through all characters, check if there are still any remaining characters in the list.\n     - If so, continue looping until only one character remains.\n     - Append that remaining character to 'result'.\n   - Return the result after processing all characters.\n  \nHere's the Python code snippet:\n\n```python\ndef remove_char(s, ch):\n    chars = []\n    i = 0\n    \n    #"
  },
  {
    "problem": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "test_case": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ],
    "solution_code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
    "solution_cot": "1. Calculate the sum of each row.\n2. Sort these sums in ascending order.\n3. Construct the sorted matrix by placing each element at its corresponding position in the original matrix based on the sorted sums.\n\nExample:\nInput: [[5, 9], [8, 7]]\nOutput: [[5, 9], [8, 7]] (Correctly sorts the matrix)\n\nInput: [[3, 6], [2, 4], [1, 8]]\nOutput: [[1, 8], [2, 4], [3, 6]] (Incorrectly sorts the matrix)\n\nNote: The input matrix may contain duplicate values in some rows.\n\nEdge cases:\n- If the input is empty,"
  },
  {
    "problem": "Write a function to count the most common words in a dictionary.",
    "test_case": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ],
    "solution_code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
    "solution_cot": "Counting word occurrences using dictionaries (e.g., Counter from collections module)\n\nInput: A dictionary of words and their counts.\nOutput: A list containing the most frequently occurring words sorted alphabetically.\n\nExample:\n```python\nwords = {\"apple\": 5, \"banana\": 3, \"orange\": 8}\nmost_common_words(words) => [\"banana\", \"apple\"]\n```\n\nSolution:\n```python\nfrom collections import Counter\n\ndef most_common_words(dictionary):\n    # Initialize an empty list to store the most frequent words\n    most_frequent_words = []\n    \n    # Count the frequency of each word in the dictionary\n    word_counts = Counter(dictionary.values())\n    \n    # Find the maximum frequency among all words\n    max_freq ="
  },
  {
    "problem": "Write a python function to find the volume of a triangular prism.",
    "test_case": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ],
    "solution_code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
    "solution_cot": "1. Accept three inputs: base length, height, and depth (lateral edges) of the triangular prism.\n2. Calculate the area of one triangle using Heron's formula.\n3. Multiply the area by the lateral edges to get the volume of the prism.\n4. Return the calculated volume as output.\n\nKey steps:\n1. Initialize variables: `base_length`, `height`, `depth`.\n2. Compute the semi-perimeter of the base triangle using Heron's formula.\n3. Use the semi-perimeter to calculate the area of the base triangle.\n4. Multiply the area by the depth to obtain the volume of the prism.\n5. Return the calculated volume.\n\nEdge cases:\n1. Ensure all input values are positive numbers"
  },
  {
    "problem": "Write a function to split a string at lowercase letters.",
    "test_case": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ],
    "solution_code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
    "solution_cot": "Use regular expression to match lowercase letters and capture them as separate groups. Extract the captured groups using backreference syntax (e.g., `\\\\1`).\n\nExample:\n```python\nsplit_string(\"hello world\", \"w\")\n```\nExpected output:\n```python\n['h', 'e', 'l', 'l', 'o']\n```\n\n**Note:** The input string will always be a single line of text without any leading or trailing whitespace characters. The output should be returned as a list of strings. ```python\nimport re\n\ndef split_string(input_str):\n    # Regular expression pattern to find lowercase letters followed by an optional space\n    pattern = r'(?<=[a-z])(?![a-z])'\n    \n    #"
  },
  {
    "problem": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "test_case": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ],
    "solution_code": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
    "solution_cot": "Implement a recursive solution where each letter is processed independently until all characters are matched. Utilize a stack to keep track of open brackets and ensure correct nesting before processing nested structures.\n\nInput: A single string representing a sequence of lowercase letters (e.g., \"abc_de\").\nOutput: The final sequence of letters joined by underscores without any spaces or additional characters beyond the initial sequence.\n\nExample:\nfind_sequence(\"hello_world\") should yield \"h_e_l_l_o_w_r_o_l_d\"\n\nEdge case:\nfind_sequence(\"\") should produce an empty string.\n\nKey steps:\n1. Initialize a counter for matching characters and a stack to hold unmatched characters.\n2. Iterate through each character in the input string.\n   - If the current character is not a letter,"
  },
  {
    "problem": "Write a function to find the perimeter of a square.",
    "test_case": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ],
    "solution_code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
    "solution_cot": "1. Initialize two variables: side_length = input() and perimeter = 0.  \n2. Calculate perimeter using formula 2 * side_length.  \n3. Return calculated perimeter.\n\nInput/output:  \nSingle sentence describing parameters and return value.  \nReturn \"Perimeter: <perimeter>\"\n\nApproach:  \nUse variables to store the side length and calculate perimeter directly.  \nKey steps:  \n1. Convert input into variable `side_length`.  \n2. Use basic arithmetic operations to compute perimeter.  \n3. Return the computed perimeter as a string formatted as \"Perimeter: <perimeter>\".  \nEdge case:  \nNo additional conditions need to be considered.  \n\nSolution Example:  \n```python\nprint(perimeter(\"5\"))"
  },
  {
    "problem": "Write a function to remove characters from the first string which are present in the second string.",
    "test_case": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ],
    "solution_code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ",
    "solution_cot": "Input/Output: \nApproach: \nKey Steps: \nEdge Cases: \n\nFunction name: \nReturn Value: \nParameters: \nTest Cases: (if applicable) \n\n```python\ndef remove_chars(str1, str2):\n    # Your code here\n    pass\n\n# Example usage\nresult = remove_chars(\"hello\", \"e\")\nprint(result)\n```\n\n```python\ndef remove_chars(str1, str2):\n    # Initialize an empty list to store unique characters of str2\n    unique_chars = []\n    \n    # Iterate through each character in str1\n    for char in str1:\n        if char not in unique_chars:\n            # If the current character is not in unique_chars, add it to the"
  },
  {
    "problem": "Write a function to find whether a given array of integers contains any duplicate element.",
    "test_case": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ],
    "solution_code": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
    "solution_cot": "Use an unordered set (set) data structure to keep track of elements that have been seen so far. Iterate through each number in the array, check if it's already present in the set. If found, return True indicating duplicates are present; otherwise, add the number to the set.\n\n```python\ndef has_duplicates(arr):\n    # Initialize an empty set\n    seen = set()\n    \n    # Iterate through each number in the array\n    for num in arr:\n        # Check if the number is already in the set\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n            \n    return False\n```\n\n### Explanation:\n\n1. **Initialization**: An empty set named `seen` is initialized to"
  },
  {
    "problem": "Write a function to check if the given number is woodball or not.",
    "test_case": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ],
    "solution_code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
    "solution_cot": "1. Define an array of booleans representing the numbers from 0 to 99.\n2. Initialize an empty string variable called 'woodball'.\n3. Iterate through each integer from 0 to 99.\n   - If any integer matches a character at a specific position in 'woodball', set it to true.\n4. Return the boolean result indicating whether all integers match their respective positions in 'woodball'.\n\nExample usage:\n```python\nisWoodball(50) -> False (because 50 does not match)\nisWoodball(78) -> True (because 78 matches its position in 'woodball')\n```\nApproach: Use booleans to track numbers against a predefined list.\nKey"
  },
  {
    "problem": "Write a function to find m number of multiples of n.",
    "test_case": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ],
    "solution_code": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)",
    "solution_cot": "Use an array to store numbers divisible by n.\n\nInput: A list of integers (m)\nOutput: An array containing m multiples of n\n\nApproach: Initialize an empty array called 'multiples'. Iterate through each integer in the input list using a loop. For each integer i, check if it is divisible by n using the modulo operator (%). If true, add i to the 'multiples' array.\n\nKey steps:\n1. Create an empty array named 'multiples'\n2. Loop over each integer in the input list\n   - Check if the current integer is divisible by n\n   - If true, add the integer to the 'multiples' array\n\nEdge case considerations:\n- If m is greater than the length of"
  },
  {
    "problem": "Write a function to find the first duplicate element in a given array of integers.",
    "test_case": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ],
    "solution_code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
    "solution_cot": "1. Initialize two variables `min` and `max` with the same value as the length of the input array.\n2. Iterate through each number in the array using a loop.\n   - If the current number is equal to `min`, set `min` to `max`.\n   - Otherwise, update `max` to be the new maximum between `min` and the current number.\n3. Return the final value of `max`.\n\n### Algorithm Strategy Summary:\n1. **Input:** An integer array `arr`\n2. **Output:** The first duplicate element found in the array, if any.\n3. **Approach:** Use two variables to keep track of the minimum and maximum values encountered so far during iteration.\n4. **"
  },
  {
    "problem": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "test_case": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ],
    "solution_code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ",
    "solution_cot": "- Traverse each sublist and calculate the sum of its elements.\n- Keep track of the maximum sum encountered during traversal.\n\nKey steps:\n1. Initialize variables `max_sum` as 0 and `current_sum` as 0.\n2. Iterate over each sublist in the input list.\n3. For each sublist, add its elements to `current_sum`.\n4. Update `max_sum` if `current_sum` is greater than `max_sum`.\n5. After processing all sublists, return `max_sum`.\n\nEdge cases:\n1. If any sublist is empty, return an appropriate error message.\n2. If the input list is empty, return 0.\n\nExample:\n```python\nfind_max_sum([[1, 2], [3"
  },
  {
    "problem": "Write a function to convert the given binary number to its decimal equivalent.",
    "test_case": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ],
    "solution_code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
    "solution_cot": "Binary to Decimal Conversion Algorithm\n\nInput: A string representing a binary number (e.g., \"1011\")\nOutput: The decimal representation of the binary number as an integer\n\nApproach: Utilize bit manipulation techniques\nKey steps:\n1. Initialize a variable 'decimal' to store the result.\n2. Iterate through each digit in the binary number, starting from the least significant bit (LSB).\n   - Convert the current bit to an integer by performing bitwise AND between the bit and 2^i, where i is the position of the current bit in the binary number.\n   - Add the result to 'decimal'.\n3. Return 'decimal' after completing the iteration.\n\nEdge cases:\n1. If the input is not a"
  },
  {
    "problem": "Write a python function to find the product of non-repeated elements in a given array.",
    "test_case": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ],
    "solution_code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ",
    "solution_cot": "- Use a set to store unique elements from the input array.\n- Iterate through the array, adding each element to the set if it is not already present.\n- For each unique element in the set, calculate its factorial using an efficient method (e.g., calculating factorials iteratively).\n- Return the product of all these factors.\n\n### Algorithm Strategy Points:\n1. **Input/Output**: The function should accept one parameter `nums` which is a list of integers.\n2. **Approach**: Utilize a set to filter out duplicates and iterate over the provided array `nums`.\n3. **Key Steps**:\n   - Store every unique number from `nums` into a set named `unique_nums`.\n   - Iterate through the `"
  },
  {
    "problem": "Write a function to check if the given tuple list has all k elements.",
    "test_case": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ],
    "solution_code": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ",
    "solution_cot": "Input: A list of tuples where each tuple contains at least two integers (k).\nOutput: True if all k-tuples have equal sums, False otherwise.\nApproach: Use a dictionary to count occurrences of each integer sum across all k-tuples.\nKey steps:\n1. Initialize an empty dictionary to store counts of integer sums.\n2. Iterate through each tuple in the input list.\n   - For each tuple, calculate its sum.\n   - If the sum is already present in the dictionary, increment its count by 1.\n   - Otherwise, set its count to 1.\n3. After processing all tuples, compare the values in the dictionary. If any integer sum's count is greater than 1, return False; otherwise,"
  },
  {
    "problem": "Write a python function to remove all digits from a list of strings.",
    "test_case": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ],
    "solution_code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
    "solution_cot": "Input: List of strings (each string contains alphanumeric characters)\nOutput: List of strings without any digits\n\nApproach: Use Python's built-in filter() method\nKey steps: \n1. Filter out elements that are not numeric using the regex pattern '^[^0-9]*$'\n2. Return the filtered list as required output\nEdge cases: None\n\nNote: The function should be able to handle lists containing various types of data including mixed case strings and numbers.\n\nExample usage:\nremove_digits([\"abc123\", \"xyz456\", \"test789\", \"12345\"]) -> [\"abc\", \"xyz\", \"test\"]\nremove_digits([\"a1b2c3\", \"d4"
  },
  {
    "problem": "Write a python function to find binomial co-efficient.",
    "test_case": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ],
    "solution_code": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
    "solution_cot": "Input: n (non-negative integer), k (non-negative integer)\nOutput: binom(n, k) (integer)\n\nApproach: \n- Use mathematical formula for binomial coefficient: C(n, k) = n! / (k!(n-k)!)\n- Calculate factorial using Python's math module\n\nKey steps: \n1. Import necessary modules\n2. Define the function with parameters n and k\n3. Implement the main logic to compute the binomial coefficient\n4. Handle edge case where either n or k is negative by returning -1\n5. Return the computed binomial coefficient as an integer\n\nEdge cases: \n1. If both n and k are zero, return 1\n2. If n is"
  },
  {
    "problem": "Write a python function to find the element occurring odd number of times.",
    "test_case": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ],
    "solution_code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
    "solution_cot": "Input/output: \nApproach: \nKey steps: \nEdge case(s): \n\n```python\ndef find_odd_occurrence(arr):\n    # Your code here\n```\n\n**Note**: The input array `arr` is guaranteed to have at least one occurrence of an odd number. You are not allowed to use any built-in Python functions that directly solve this problem (e.g., collections.Counter). Implement your solution using basic programming constructs only. ```python\ndef find_odd_occurrence(arr):\n    # Initialize variables to keep track of elements and their counts\n    count = {}\n    \n    # Iterate through the array\n    for num in arr:\n        if num in count:\n            # If the number occurs more than once, update its count"
  },
  {
    "problem": "Write a python function to count all the substrings starting and ending with same characters.",
    "test_case": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ],
    "solution_code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
    "solution_cot": "1. Initialize an empty list to store substrings.\n2. Iterate over each character of the input string.\n   - If the current character is not equal to the first character, check if it is equal to the last character.\n     - If yes, append the substring from the second character to the end.\n     - Else, append the substring from the start to the end.\n3. Return the list of substrings.\n\nApproach: Use a list to store substrings\nKey steps: \n1. Create an empty list to store substrings.\n2. Iterate over each character of the input string.\n   - If the current character is not equal to the first character, check if it is equal to the last character.\n     - If"
  },
  {
    "problem": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "test_case": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ],
    "solution_code": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result",
    "solution_cot": "1. Sort both input arrays (list1 and list2) separately based on their values.\n2. Use a min heap to keep track of frequencies.\n3. For each element in list1, if it is greater than any element in the heap,\n   - Remove all elements from the heap except the one containing the current element.\n4. Push the current element back into the heap.\n5. Once all elements are processed, pop the smallest element from the heap as the result.\n\nKey steps:\n1. Sorting the two lists ensures that we can efficiently compare elements by their values.\n2. The min heap allows us to quickly access and remove the largest frequency element.\n3. This approach guarantees finding the k largest frequent elements due to the properties"
  },
  {
    "problem": "Write a python function to find the largest prime factor of a given number.",
    "test_case": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ],
    "solution_code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
    "solution_cot": "1. Initialize a variable `largest_prime` to 0.\n2. While the input number is greater than 1:\n   a. Check if the current number is divisible by any integer from 2 to its square root (inclusive).\n     - If it is, divide the number by that divisor.\n     - Otherwise, increment the `largest_prime`.\n3. Return the final value of `largest_prime`.\n\nExample usage:\n```python\nprint(find_largest_prime(13195))  # Output: 29\n```\nEdge case: The function should handle invalid inputs gracefully and provide an appropriate error message. For example, if the input is not a positive integer or less than 2, the function"
  },
  {
    "problem": "Write a python function to convert a decimal number to binary number.",
    "test_case": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ],
    "solution_code": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
    "solution_cot": "Use built-in Python functions and manipulate strings\n\nSolution strategy: Utilize string manipulation methods to convert decimal numbers into binary format\n\nExample:\n```python\nbinary_conversion(5) -> \"101\"\nbinary_conversion(8) -> \"1000\"\n```\n\nInput: \ndecimal_number = 9\n\nOutput:\nbinary_number = \"100\"\n\nExplanation:\nThe provided solution is designed to take an integer as input (in this case, `decimal_number`), perform the conversion from decimal to binary using Python's built-in functionality, and then output the result. The approach utilizes Python's built-in string formatting capabilities along with string manipulation techniques to achieve the desired outcome efficiently. \n\nKey steps:\n1. Convert the given decimal number"
  },
  {
    "problem": "Write a python function to find the missing number in a sorted array.",
    "test_case": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ],
    "solution_code": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ",
    "solution_cot": "1. Identify the expected last element of the sorted array.\n2. Iterate through the given array from the first element to the second-to-last element.\n3. For each element, check if it matches the expected last element. If not, return that index as the missing number.\n4. Return the current iteration index plus one (to account for the starting point).\n\nExample usage:\n```python\nmissing_number = find_missing_number([1,2,4])\nprint(missing_number) # Output: 3\n\nmissing_number = find_missing_number([-3,-5,-9,0,1,2,4])\nprint(missing_number) # Output: -1\n```\nNote: The provided example uses negative numbers for demonstration purposes."
  },
  {
    "problem": "Write a function to find the n-th rectangular number.",
    "test_case": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ],
    "solution_code": "def find_rect_num(n):\r\n  return n*(n + 1) ",
    "solution_cot": "1. Initialize an empty list `result` to store all numbers from 1 to n.\n2. For each integer i from 1 to n, append i^2 to the list.\n3. Return the last element of the list as the result.\n\nExample:\nInput: n = 5\nOutput: [1, 4, 9, 16, 25]\n\nApproach: List comprehension\nKey steps: Append square of each integer from 1 to n to the list, then return the last element\nEdge case: If n is less than or equal to 0, return an empty list (no elements)\n\nTest case 1:\nInput: 5\nExpected output: [1, 4"
  },
  {
    "problem": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "test_case": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ],
    "solution_code": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ",
    "solution_cot": "1. Parse the input values to extract the numerator and denominator.\n2. Calculate the greatest common divisor (GCD) of the two numbers.\n3. Use the GCD to calculate the least common multiple (LCM) of the two numbers.\n4. Find the largest multiple of the LCM that is less than the Nth digit.\n5. Divide the Nth digit by its corresponding position in the string representation of the number to get the final result.\n6. Return the result as a string.\n\nExample:\nInput: num1 = 7, num2 = 12, n = 8\nOutput: \"2\"\n\nNote: The length of the string will not exceed 20 characters.\n\nFunction signature: def nth"
  },
  {
    "problem": "Write a function to sort a given mixed list of integers and strings.",
    "test_case": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ],
    "solution_code": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part",
    "solution_cot": "1. Define an empty list called 'sorted_list'.\n2. Iterate through each element in the input list:\n   a. If the element is an integer, add it to 'sorted_list' as a string.\n   b. If the element is a string, convert it to lowercase and then add it to 'sorted_list'.\n3. Return the sorted_list.\n\nExample usage:\n```python\nprint(sort_list([5, \"apple\", 8, \"banana\"]))  # Output: ['apple', 'banana', 5, 8]\n```\n\nInput:\n```python\n[7, \"dog\", 9, \"cat\", 3, \"elephant\"]\nOutput: ['dog', 'cat', 3, 7"
  },
  {
    "problem": "Write a function to find the division of first even and odd number of a given list.",
    "test_case": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ],
    "solution_code": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)",
    "solution_cot": "Use a single pass through the list and store the division result in a variable. Handle edge cases such as empty lists or non-list inputs gracefully.\n\nInput: A list containing integers\nOutput: The division of the first even and odd numbers found in the input list\n\nEdge Cases:\n1. If the list is empty, return None.\n2. If the list contains only one element, return that element.\n\nExample:\n```python\nfind_division([10, 5, 8]) -> (6, 2)\n```\n\n```python\nfind_division([]) -> None\nfind_division([10]) -> (None, None)\nfind_division([2, 4, 6]) -> (2, 3"
  },
  {
    "problem": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "test_case": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ],
    "solution_code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
    "solution_cot": "Use a hash set to keep track of unique characters encountered in the string. If a character is already present in the set, it means the current arrangement violates the rule (i.e., adjacent characters are not different). Otherwise, add the character to the set.\n\n```python\ndef can_rearrange(s):\n    # Initialize an empty set to store unique characters\n    unique_chars = set()\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the current character is already in the set\n        if char in unique_chars:\n            # Return False immediately if we find such a pair\n            return False\n        else:\n            # Add the character to the set\n            unique_chars.add(char)"
  },
  {
    "problem": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "test_case": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ],
    "solution_code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result",
    "solution_cot": "1. Import necessary libraries\n2. Define function name as \"frequency_finder\"\n3. Accept input parameter 'lst' as a list of lists\n4. Use collections.Counter() to count occurrences of each element in lst\n5. Return a dictionary where keys are unique elements from lst and values are their frequencies\n\nExample:\nfrequency_finder([[\"apple\", \"banana\"], [\"orange\", \"apple\"], [\"banana\"]]) -> {\"apple\": 2, \"banana\": 2} \n\nKey steps:\n- Collect all elements in lst into a set for uniqueness\n- Create Counter object from that set\n- For each key in the counter, add its value (frequency) to a dictionary\n- Return the resulting dictionary\n\nEdge case:\n-"
  },
  {
    "problem": "Write a function to filter even numbers using lambda function.",
    "test_case": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ],
    "solution_code": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums",
    "solution_cot": "Use lambda functions to create an anonymous function that filters out odd numbers from a list.\n\nInput/output: Single sentence describing parameters and return value\n\nApproach: Define a lambda function that checks if a number is even by returning true if divisible by 2, false otherwise.\n\nKey steps: \n1. Create a lambda function called `is_even` that takes one parameter (a number).\n2. Inside the lambda function, use the modulo operator `%` to check if the number is divisible by 2.\n   - If the result of the modulo operation is 0, it means the number is even.\n   - Return True.\n   - Otherwise, return False.\n\nEdge cases: None\n\nPseudocode explanation: This solution does not use any pseud"
  },
  {
    "problem": "Write a python function to find the sum of repeated elements in a given array.",
    "test_case": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ],
    "solution_code": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])",
    "solution_cot": "1. Initialize a variable `sum` to store the result.\n2. Create an empty dictionary `count` to keep track of occurrences of each element.\n3. Iterate through the array using a loop:\n   - If the current element is already in the dictionary, add its count (value) to `sum`.\n   - Otherwise, set its value to 1 and add it to the dictionary.\n4. Return the final value of `sum`.\n\n**Example**\n```python\nfind_sum([5, 7, 8, 9, 5, 6]) => 20\n```\n\nExplanation:\nThe sum of repeated elements [5, 5] is 10.\n\n**Edge Cases**\n1. For an"
  },
  {
    "problem": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "test_case": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ],
    "solution_code": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')",
    "solution_cot": "1. Define a regular expression pattern that matches any sequence of lowercase letters followed by an underscore.\n2. Use the `re.findall()` method to search through all occurrences of the defined pattern within the input string.\n3. Collect these matching substrings into a list, which will be returned as the result of the function.\n\nHere is a sample code snippet illustrating the approach:\n\n```python\nimport re\n\ndef find_lowercase_sequences(input_string):\n    # Define the regular expression pattern\n    pattern = r'([a-z]+)_'\n    \n    # Search for all matches in the input string\n    matches = re.findall(pattern, input_string)\n    \n    # Return the list of found sequences\n    return matches\n```\n\nThis function finds all sequences"
  },
  {
    "problem": "Write a function that matches a word at the beginning of a string.",
    "test_case": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ],
    "solution_code": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
    "solution_cot": "**Recursive Matching**\nKey steps:\n1. Define a recursive function called `matchWord` with two parameters: `word`, which is the current prefix of the string, and `text`, which is the remaining part of the string to match against.\n2. If `text` is empty, check if `word` starts with `text`. If true, return `True`.\n3. If `word` starts with `text`, recursively call `matchWord` on the next character of `text` (i.e., `text[1:]`) and continue matching until all characters are processed.\n4. If `word` does not start with `text`, return `False`.\n\nEdge cases:\n- If `text` contains only spaces, return"
  },
  {
    "problem": "Write a function to find the gcd of the given array elements.",
    "test_case": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ],
    "solution_code": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd",
    "solution_cot": "1. Define a helper function `gcd` that takes two integers as input and returns their greatest common divisor (GCD).\n2. Implement the main function `find_gcd` which receives an array of integers as its parameter.\n3. In the `find_gcd` function, use recursion to calculate the GCD of all numbers in the array.\n4. Return the calculated GCD.\n5. Provide examples demonstrating how to call the `find_gcd` function with different arrays and verify the correctness using assertions.\n\n```python\ndef gcd(a, b):\n    # Base case: if either number is 0, return the non-zero number\n    if b == 0:\n        return a\n    else:\n        # Recursive case"
  },
  {
    "problem": "Write a python function to determine whether all the numbers are different from each other are not.",
    "test_case": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ],
    "solution_code": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;",
    "solution_cot": "1. Initialize an empty set to store unique values.\n2. Iterate through each number in the list of integers provided as input.\n3. For each number, check if it already exists in the set. If it does, return False indicating that not all numbers are distinct.\n4. Add the current number to the set.\n5. After processing all numbers, check if the size of the set is equal to the length of the list (excluding the last element). If true, return True; otherwise, return False.\n\nGiven List: [4, 7, 9, 8, 10]\n\nFunction Signature: def is_all_numbers_unique(numbers: List[int]) -> bool\n\nEdge Cases:\n- The function should handle any valid"
  },
  {
    "problem": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "test_case": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ],
    "solution_code": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10",
    "solution_cot": "Factorial approach\nApproach: The factorial of any number is the product of all positive integers up to that number. To find the last digit of (a! / b!)^k, we need to consider the factorials of k numbers, which can be handled by taking modulo 9 at each step. This ensures that the result does not depend on the initial values of a and b, making it more efficient than using large numbers directly.\nKey steps: \n1. Compute the factorial of b!\n2. Initialize a variable \"last_digit\" to 0.\n3. Use a loop to compute the factorial of k consecutive numbers starting from 1.\n4. Take the modulo 9 of the current factorial value with 9 to get"
  },
  {
    "problem": "Write a python function to set all odd bits of a given number.",
    "test_case": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ],
    "solution_code": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)",
    "solution_cot": "Use bitwise operations\nInput/output: A single integer (e.g., 5)\nApproach: XOR operation on two variables representing each bit position\nKey steps: Apply XOR between the original number and its complement\nEdge case: Ensure both input numbers are within range\nCode snippet for testing: >>> odd_bit_set(5) # Output should be 7\n\nNote: The function should handle any valid positive integer as input. If an invalid input is provided, it should raise a ValueError. Additionally, if the input number is already set to all even bits, the function should return the original number unchanged. Here's how the function might look:\n\n```python\ndef odd_bit_set(number):\n    # Check if input is a valid positive integer"
  },
  {
    "problem": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "test_case": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ],
    "solution_code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ",
    "solution_cot": "1. Define an input parameter `list` of type `List[List<T>>`.\n2. Use a helper method `extractFirstElement(list)` to extract elements at positions where the index is odd.\n3. If the input list has less than 50 elements, call `extractFirstElement(list)`.\n4. Return the extracted elements as a new list.\n\n```java\npublic List<T> extractElements(List<List<T>> list) {\n    if (list.size() < 50) {\n        extractFirstElement(list);\n    }\n    \n    return list.stream()\n              .map(T::get)\n              .collect(Collectors.toList());\n}\n```\n\nInput/Output Specification:\n1. The function should be able to handle any valid input list"
  },
  {
    "problem": "Write a function to find the list with minimum length using lambda function.",
    "test_case": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ],
    "solution_code": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)",
    "solution_cot": "1. Use lambda function to compare lengths of two lists.\n2. Return the list with minimum length after comparison.\nKey steps:\n- Define a lambda function that compares the lengths of two lists.\n- Pass these two lists as arguments to the lambda function.\n- The lambda function will determine which list is shorter by returning its index.\n- Use a loop to iterate through the original lists until it finds an element that matches the shorter list's index.\n- Store the index of the matching element as the result.\nEdge case considerations:\n- If one list is longer than the other, the function should still work correctly.\n- It must handle empty lists gracefully.\n- Ensure all elements are comparable (e.g., both being strings or integers).\n- Consider edge"
  },
  {
    "problem": "Write a function to print check if the triangle is equilateral or not.",
    "test_case": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ],
    "solution_code": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False",
    "solution_cot": "1. Check if all three sides of the triangle are equal.\n2. If they are, return \"Equilateral Triangle\".\n3. If any two sides are equal, return \"Isosceles Triangle\".\n\nExample:\n```python\nprint(is_equilateral_triangle(5, 5, 5)) # Output: \"Equilateral Triangle\"\nprint(is_equilateral_triangle(5, 6, 7)) # Output: \"Isosceles Triangle\"\n```\n\nNote: The function should handle non-integer inputs gracefully by returning an appropriate error message. ```python\ndef is_equilateral_triangle(side_length):\n    # Check if all sides are equal\n    if side_length == 0:\n        return \"Invalid input - All sides"
  },
  {
    "problem": "Write a function to caluclate area of a parallelogram.",
    "test_case": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ],
    "solution_code": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area",
    "solution_cot": "1. Initialize variables to store base and height of the parallelogram.\n2. Calculate the area using the formula A = b * h, where 'b' is the base and 'h' is the height.\n3. Return the calculated area as the result.\n\nInput/output: \n1. The function should take two inputs - the base and height of the parallelogram.\n2. The function should output the calculated area.\n3. The function can handle invalid input (e.g., negative values for either dimension) by throwing an exception.\n\nApproach: \nThe approach here involves defining a simple arithmetic operation to calculate the area based on the given dimensions. This is achieved through the use of basic arithmetic operations such as multiplication and addition."
  },
  {
    "problem": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "test_case": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ],
    "solution_code": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ",
    "solution_cot": "Use two pointers approach to compare the first and last character of the string.\n\n1. Initialize two pointers, one at the start (index 0) and another at the end (index n-1).\n2. Compare the characters at these indices.\n3. If they are equal, return True. Otherwise, continue comparing until both ends meet.\n4. If any mismatch is found, immediately return False.\n5. Return the result after the loop completes.\n\nExample:\n```python\ndef is_first_last_equal(string):\n    # Your code here\n```\n\nEdge cases:\n- The input string can be empty.\n- The string may contain only whitespace characters.\n- The string may consist entirely of the same characters.\n- The string may have repeated characters that"
  },
  {
    "problem": "Write a function to sort the given array by using counting sort.",
    "test_case": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ],
    "solution_code": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list",
    "solution_cot": "Counting Sort Algorithm\n\nInput: Array A = [5, 7, 8, 9, 6, 10]\n\nOutput: Sorted array in ascending order: [1, 5, 6, 7, 8, 9] \nCounting Sort is an efficient sorting algorithm that works by allocating a fixed number of buckets (which can be greater than the size of the input) and then distributing the elements into these buckets based on their values.\n\nKey steps:\n1. Initialize count array of size equal to max element + 1, where max element is the largest element in the array.\n2. Iterate through each index i from 0 to max - 1, increment count[i] by the frequency"
  },
  {
    "problem": "Write a function to find t-nth term of geometric series.",
    "test_case": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ],
    "solution_code": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn",
    "solution_cot": "1. Define a variable `n` as an integer representing the position of the term (starting from 0).\n2. Initialize variables `a` and `d` as float values representing the first term (`a`) and common ratio (`d`) respectively.\n3. Use a loop that iterates through each term of the geometric sequence up to the nth term. \n4. Inside the loop, calculate the current term by multiplying the previous term by the common ratio and update the terms accordingly.\n5. After the loop completes, return the nth term calculated.\n\nExample usage:\n```python\nfind_t_nth_term(5) should return the fifth term of the geometric series starting with 1 and having a common ratio of 2.\n``"
  },
  {
    "problem": "Write a python function to check if a given number is one less than twice its reverse.",
    "test_case": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ],
    "solution_code": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ",
    "solution_cot": "1. Define a helper function that calculates the reverse of a number.\n2. Implement a main function that checks if the input number is one less than twice its reverse.\n3. Return True if the condition is met; otherwise, False.\n\n```python\ndef reverse_number(n):\n    # Calculate the reverse of n\n    rev = int(str(n)[::-1])\n    # Check if the difference between n and twice the reverse is exactly one\n    return n == 2 * rev - 1\n\n# Example usage:\nnumber_to_check = 50\nif reverse_number(number_to_check):\n    print(f\"{number_to_check} is one less than twice its reverse.\")\nelse:\n    print(f\"{number_to_check} does not"
  },
  {
    "problem": "Write a python function to find the largest number that can be formed with the given digits.",
    "test_case": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ],
    "solution_code": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ",
    "solution_cot": "1. Initialize a variable 'max' with the smallest possible integer value.\n2. Iterate through each digit in the input list of numbers.\n   - For each digit, if it is greater than 'max', update 'max'.\n3. Return the final value of 'max'.\n\nExample usage:\n```python\nfind_largest_number([5, 7, 8], [9, 6, 4])\n# Output: 987\n```\n\nEdge case consideration:\n- If the input list is empty, return None.\n- If any element in the input list is not an integer, raise a ValueError.\n\nAdditional constraints and considerations:\n- The input will contain at most 10^6 integers.\n- The input values"
  },
  {
    "problem": "Write a python function to check whether the given two integers have opposite sign or not.",
    "test_case": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ],
    "solution_code": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ",
    "solution_cot": "Input/output: Single sentence describing parameters and return value  \nApproach: Name the exact algorithm/data structure  \nKey steps: 3-4 bullet points with specific algorithmic operations  \nEdge cases: 2-3 specific edge conditions  \n\n```python\ndef check_opposite_sign(num1, num2):\n    \"\"\"\n    Determine if the given two integers have opposite signs.\n    \n    Parameters:\n    - num1 (int): The first integer\n    - num2 (int): The second integer\n    \n    Returns:\n    - bool: True if num1 and num2 have opposite signs, False otherwise.\n    \"\"\"\n    # Your code here\n```\n\nPseudocode:\n```\ncheck_opposite_sign(num1, num2) {"
  },
  {
    "problem": "Write a function to find the nth octagonal number.",
    "test_case": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ],
    "solution_code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ",
    "solution_cot": "Recursive approach\nData structure: Array\nKey steps: \n1. Initialize an array 'octagon' of size n.\n2. Set the first element of the array as 0 (octagonal number).\n3. Iterate through the array from index 0 to n-1.\n   - For each iteration, calculate the nth octagonal number using the formula `n * (3*n - 2) / 2`.\n   - Append the calculated value to the end of the array.\n4. Return the last element of the array, which is the nth octagonal number.\n\nEdge case consideration: Ensure that the input is a positive integer less than or equal to 50. If not, throw an exception or raise an error indicating invalid"
  },
  {
    "problem": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "test_case": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ],
    "solution_code": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max",
    "solution_cot": "1. Initialize variables `max_len` as 0, `prev_index` as -1, `curr_diff` as infinity, and `subseq_length` as 1.\n2. Iterate through each element in the input array from left to right.\n3. For each element, check if it is greater than `prev_index`.\n4. If true, calculate the difference between the current element and `prev_index` and update `max_len` if the difference is larger.\n5. Update `prev_index` to be the current element.\n6. Increment `subseq_length` by 1 after reaching an index where the difference has been updated.\n7. Return `max_len`.\n\n### Given Array: [1, 4,"
  }
]