[
    {"prompt": "give code for even number detection in python",
    "response": "You can detect if a number is even in Python using a simple function. Here's some code to do that:\n\n```python\ndef is_even(number):\n    \"\"\"Check if a number is even.\"\"\"\n    return number % 2 == 0\n\n# Example usage:\nnumber = 10\nif is_even(number):\n    print(f\"{number} is even.\")\nelse:\n    print(f\"{number} is odd.\")\n```\n\nIn this code, the `is_even` function checks if the remainder when `number` is divided by 2 is zero. If so, the number is even; otherwise, it is odd.",
    "feedback": 1,
    "model": "developer"
},
{"prompt": "write a python code for checking prime number",
    "response": "To check if a number is a prime number in Python, you can use the following code:\n\n```python\ndef is_prime(n):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Example usage:\nnumber = 29\nif is_prime(number):\n    print(f\"{number} is a prime number.\")\nelse:\n    print(f\"{number} is not a prime number.\")\n```\n\n### Explanation:\n- **Numbers less than or equal to 1** are not prime numbers.\n- **Numbers 2 and 3** are prime numbers.\n- Any other number divisible by 2 or 3 is not a prime.\n- For numbers greater than 3, the code checks divisibility starting from 5 and increments by 6 (i.e., checks 5, 11, 17, etc.), since a prime number is not divisible by any number other than 1 and itself.\n- The loop runs while `i * i` is less than or equal to `n` to reduce the number of operations, utilizing the fact that a larger factor of `n` must be a multiple of a smaller factor that has been already checked.",
    "feedback": 1,
    "model": "developer"
},
{"prompt": "Check if in given list of numbers, are any two numbers closer to each other than given threshold. >>> has_close_elements([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True",
    "response": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n   Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
    "feedback": 0,
    "model": "developer"
},
{"prompt": "Test if given string is a palindrome",
    "response": "\n\ndef is_palindrome(string: str) -> bool:\n    Test if given string is a palindrome \n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
    "feedback": 1,
    "model": "developer"
},
{"prompt": "Return sorted unique elements in a list >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123",
    "response": "\n\ndef unique(l: list):\n   Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n   \n    return sorted(list(set(l)))\n",
    "feedback": 0,
    "model": "developer"
}
]